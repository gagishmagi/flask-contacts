@Library('shared-library') _

pipeline {
    agent any
    environment {
        JIRA_URL = 'https://mlprojectsweb.atlassian.net/'
        JIRA_CREDENTIALS = credentials('jira-jenkins')
    }

    stages {
        stage('Pull from github') {
          steps {
            // Get contact app code from a GitHub repository
            git 'https://github.com/gagishmagi/flask-contacts.git'
          }
        }

        stage('Build') {
          steps {
            // Build project on Jenkins server.
            sh '''
            python3 -m venv .venv
            . .venv/bin/activate
            pip install -r requirements.txt
            pip install pytest-html-reporter
            flask run --port 7000 &
            '''
          }
        }

        stage('Runing Tests') {
          steps {
            script {
          try {
            // Run Python tests with pytest for unit/integration/e2e tests.
            sh '''
                    . .venv/bin/activate
                    pytest --html-report=./report.html
                    '''
                // pytest --html-report=./report.html
                //pytest --junitxml=./test.xml
                } catch (Exception e) {
            currentBuild.result = 'FAILURE'
          //error("Test stage failed ${e.message}")
          }
            }
          }
        }

        stage('publish report') {
      when {
        expression { currentBuild.result == 'FAILURE' }
      }
      steps {
            publishHTML(target : [allowMissing: false,
                 alwaysLinkToLastBuild: true,
                 keepAll: true,
                 reportDir: '.',
                 reportFiles: 'report.html',
                 reportName: 'My Contacts',
                 reportTitles: 'The Contacts'])                // junit stdioRetention: '', testResults: 'test.xml'
      }
        }

        stage('notify the developers') {
      when {
        expression { currentBuild.result == 'FAILURE' }
      }

      steps {
        // slack
        slackSend channel: '#devops-channel',
                username: 'Jenkins',
                message: "The build status is ${currentBuild.currentResult}, on project ${env.JOB_NAME} find test report in this url: ${BUILD_URL}/My_20Contacts/"

                // email
                // emailext body: """The build status is ${currentBuild.currentResult}, on project ${env.JOB_NAME} find test report in this url: ${BUILD_URL}/My_20Contacts/""",
                // subject: """You got a faild build/job ${env.JOB_NAME} - ${env.BUILD_NUMBER} from jenkins""",
                // to: 'gagi.shmagi@gmail.com'

        // JIRA
        jiraCreateIssue(
                    key: 'DEFP',
                    summary: 'Issue created by Jenkins',
                    description: """ Tests failed for ${env.JOB_NAME} - ${env.BUILD_NUMBER} and here is the the report ${BUILD_URL}/My_20Contacts/""",
                    issueTypeName: 'Bug'
                )
      }
        }

        stage('deploying to server') {
      when {
        expression { currentBuild.result == 'SUCCESS' }
      }
      steps {
        sh 'echo deploying to docker..'
      }
        }

        stage('preparing the server') {
      steps {
        sh "echo 'installing the dependecies'"
      }
        }
    }
}
